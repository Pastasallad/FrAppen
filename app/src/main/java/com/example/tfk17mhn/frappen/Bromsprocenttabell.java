package com.example.tfk17mhn.frappen;

/**
 * Innehåller bromsprocenttabellernas värden hämtade från Trafikverkets linjeböcker (2017-05-18).
 * Arrayerna "_LIMITS" innehåller bromsprocenttal som utgör gränsvärden i tabellerna.
 * Tabellerna innehåller STH (Största tillåtna hastighet) i km/h
 * förutom de negativa värdena som är enligt nedan.
 * -1 = Ej tillåtet
 * -2 = Sth fastställs av operativ arbetsledning (enl. bromsprocenttabell L)
 * -3 = Förekommer ej
 * @author Marcus Hermansson, tfk17mhn
 */
public class Bromsprocenttabell {

    static final int NR_OF_TABLES = 5; // Antal tabeller, kan används för att skapa arrayer.
    static final int MAX_TRAIN_LENGTH = 730; // Max tåglängd i meter.

    static final int[] LENGTH_COLUMNS = new int[]{100,200,300,400,500,600,730};

    static final int[] A17_LIMITS = new int[]
            {0,22,61,67,70,73,76,83,86,88,91,94,100,103,114,122,125,130,150};
    static final int[][] A17 = new int[][]{
            { -1, -1, -1, -1, -1, -1, -1},
            { -2, -2, -2, -1, -1, -1, -1},
            { 70, 70, 70, 70, 70, 70, 70},
            { 80, 80, 80, 70, 70, 70, 70},
            { 80, 80, 80, 80, 80, 70, 70},
            { 80, 80, 80, 80, 80, 80, 70},
            { 80, 80, 80, 80, 80, 80, 80},
            {100,100,100,100,100, 80, 80},
            {100,100,100,100,100, 90, 80},
            {100,100,100,100,100,100, 80},
            {100,100,100,100,100,100, 90},
            {100,100,100,100,100,100,100},
            {110,110,110,100,100,100,100},
            {110,110,110,110,110,100,100},
            {110,110,110,110,110,110,110},
            {120,120,120,110,110, -3, -3},
            {120,120,120,120,120, -3, -3},
            {130,130,130,130,130, -3, -3},
            {200,160,160,160,160, -3, -3}
    };

    static final int[] A10_LIMITS = new int[]
            {0,22,61,65,67,70,73,75,76,80,83,86,88,94,98,110,119,122,130,150};
    static final int[][] A10 = new int[][]{
            { -1, -1, -1, -1, -1, -1, -1},
            { -2, -2, -2, -1, -1, -1, -1},
            { 70, 70, 70, 70, 70, 70, 70},
            { 80, 80, 70, 70, 70, 70, 70},
            { 80, 80, 80, 70, 70, 70, 70},
            { 80, 80, 80, 80, 80, 70, 70},
            { 90, 90, 90, 80, 80, 80, 70},
            {100,100,100, 80, 80, 80, 80},
            {100,100,100,100,100, 80, 80},
            {100,100,100,100,100,100, 80},
            {100,100,100,100,100,100, 90},
            {110,110,110,100,100,100, 90},
            {110,110,110,110,110,100,100},
            {110,110,110,110,110,110,100},
            {110,110,110,110,110,110,110},
            {120,120,120,120,120,110,110},
            {120,120,120,120,120,120,110},
            {120,120,120,120,120, -3, -3},
            {130,130,130,130,130, -3, -3},
            {200,160,160,160,160, -3, -3}
    };

    static final int[] B_LIMITS = new int[]
            {0,22,61,65,67,70,73,75,76,80,83,86,88,94,98,110,119,122,130,135,144};
    static final int[][] B = new int[][]{
            { -1, -1, -1, -1, -1, -1, -1},
            { -2, -2, -2, -1, -1, -1, -1},
            { 70, 70, 70, 70, 70, 70, 70},
            { 80, 80, 70, 70, 70, 70, 70},
            { 80, 80, 80, 70, 70, 70, 70},
            { 80, 80, 80, 80, 80, 70, 70},
            { 90, 90, 90, 80, 80, 80, 70},
            {100,100,100, 80, 80, 80, 80},
            {100,100,100,100,100, 80, 80},
            {100,100,100,100,100,100, 80},
            {100,100,100,100,100,100, 90},
            {110,110,110,100,100,100, 90},
            {110,110,110,110,110,100,100},
            {110,110,110,110,110,110,100},
            {110,110,110,110,110,110,110},
            {120,120,120,120,120,110,110},
            {120,120,120,120,120,120,110},
            {120,120,120,120,120, -3, -3},
            {160,160,150,140,140, -3, -3},
            {170,160,160,160,140, -3, -3},
            {200,160,160,160,160, -3, -3}
    };

    static final int[] C_LIMITS = new int[]
            {0,22,61,65,67,70,73,75,76,80,83,88,91,95,98,107,122,129,135,138,144};
    static final int[][] C = new int[][]{
            { -1, -1, -1, -1, -1, -1, -1},
            { -2, -2, -2, -1, -1, -1, -1},
            { 70, 70, 70, 70, 70, 70, 70},
            { 80, 80, 70, 70, 70, 70, 70},
            { 80, 80, 80, 70, 70, 70, 70},
            { 80, 80, 80, 80, 80, 70, 70},
            { 90, 90, 90, 80, 80, 80, 70},
            {100,100,100, 80, 80, 80, 80},
            {100,100,100,100,100, 80, 80},
            {100,100,100,100,100,100, 80},
            {120,120,120,120,120,100, 90},
            {120,120,120,120,120,100,100},
            {120,120,120,120,120,110,100},
            {120,120,120,120,120,120,110},
            {130,120,120,120,120,120,120},
            {130,130,130,130,130,120,120},
            {150,140,140,140,130, -3, -3},
            {160,160,150,140,140, -3, -3},
            {170,160,160,160,150, -3, -3},
            {170,160,160,160,160, -3, -3},
            {200,160,160,160,160, -3, -3},
    };

    static final int[] CITYBANAN_LIMITS = new int[]
            {0,80,82,85,88,90,91,92,94,95,98,101,104,105,110,112,116,117,119,122,130,135,144};
    static final int[][] CITYBANAN = new int[][]{
            { -1, -1, -1, -1, -1, -1, -1},
            { 50, 50, 50, 40, -1, -1, -1},
            { 50, 50, 50, 50, 50, -1, -1},
            { 50, 50, 50, 50, 50, 40, -1},
            { 60, 60, 60, 50, 50, 40, -1},
            { 60, 60, 60, 60, 50, 50, -1},
            { 60, 60, 60, 60, 60, 50, -1},
            { 70, 70, 70, 60, 60, 50, -1},
            { 70, 70, 70, 70, 60, 50, -1},
            { 70, 70, 70, 70, 70, 60, 40},
            { 70, 70, 70, 70, 70, 70, 40},
            {110,110,110, 70, 70, 70, 40},
            {110,110,110,110, 70, 70, 40},
            {110,110,110,110,110, 70, 40},
            {120,120,120,120,120, 70, 40},
            {120,120,120,120,120,110, 40},
            {120,120,120,120,120,110, 50},
            {120,120,120,120,120,110,110},
            {120,120,120,120,120,120,110},
            {120,120,120,120,120, -1, -1},
            {160,160,150,140,140, -1, -1},
            {170,160,160,160,140, -1, -1},
            {200,160,160,160,160, -1, -1}
    };
}